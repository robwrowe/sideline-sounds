/* eslint-disable no-console */
/*
 * Copyright Â© 2025 Robert W. Rowe
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

import { app, BrowserWindow, ipcMain } from "electron";
import {
  installExtension,
  REDUX_DEVTOOLS,
  REACT_DEVELOPER_TOOLS,
} from "electron-devtools-installer";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      autoplayPolicy: "no-user-gesture-required",
    },
    show: !app.isPackaged,
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (!app.isPackaged) {
    mainWindow.webContents.openDevTools();
  }

  // add the devtools extension
  installExtension([REACT_DEVELOPER_TOOLS, REDUX_DEVTOOLS])
    .then(async (extensions) => {
      setTimeout(() => {
        mainWindow.reload();

        console.log(
          `Added Extensions: ${extensions.map((item) => item.name).join(", ")}`
        );
      }, 1000);
    })
    .catch((err) => console.log("An error occurred adding extensions: ", err));

  mainWindow.on("ready-to-show", () => {
    if (app.isPackaged) {
      mainWindow.show();
    }
  });

  // When the window is ready, tell React to navigate to the home page
  mainWindow.webContents.on("did-finish-load", () => {
    mainWindow?.webContents.send(
      "navigate",
      "/main/show/419717fb-f85f-49fd-9bbf-ea69d43d3d55"
    );
    // mainWindow?.webContents.send("navigate", "/main");
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
import fs from "fs/promises";
import path from "path";

ipcMain.handle("get-audio-file", async (_, relativePath) => {
  // const filePath = path.resolve(__dirname, relativePath);
  const filePath = path.resolve(relativePath);

  return fs.readFile(filePath);
});

// ensure audio permission is granted
app.commandLine.appendSwitch("enable-features", "AudioServiceSandbox");
